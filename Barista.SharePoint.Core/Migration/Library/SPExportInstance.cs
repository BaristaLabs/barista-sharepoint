namespace Barista.SharePoint.Migration.Library
{
  using System.IO;
  using System.Linq;
  using Barista.Extensions;
  using Barista.Jurassic;
  using Barista.Jurassic.Library;
  using Microsoft.SharePoint;
  using Microsoft.SharePoint.Deployment;
  using System;

  [Serializable]
  public class SPExportConstructor : ClrFunction
  {
    public SPExportConstructor(ScriptEngine engine)
      : base(engine.Function.InstancePrototype, "SPExport", new SPExportInstance(engine.Object.InstancePrototype))
    {
    }

    [JSConstructorFunction]
    public SPExportInstance Construct()
    {
      return new SPExportInstance(this.InstancePrototype, new SPExport());
    }
  }

  [Serializable]
  public class SPExportInstance : ObjectInstance
  {
    private readonly SPExport m_export;
    private string m_dropLocation;

    public SPExportInstance(ObjectInstance prototype)
      : base(prototype)
    {
      this.PopulateFields();
      this.PopulateFunctions();
    }

    public SPExportInstance(ObjectInstance prototype, SPExport export)
      : this(prototype)
    {
      if (export == null)
        throw new ArgumentNullException("export");

      m_export = export;
    }

    public SPExport SPExport
    {
      get { return m_export; }
    }

    [JSProperty(Name = "settings")]
    public object Settings
    {
      get
      {
        return m_export.Settings == null
          ? null
          : new SPExportSettingsInstance(this.Engine.Object.InstancePrototype, m_export.Settings);
      }
      set
      {
        if (value is SPExportSettingsInstance)
          m_export.Settings = (value as SPExportSettingsInstance).SPExportSettings;
        else if (value is ObjectInstance)
        {
          JurassicHelper.Coerce<SPExportSettingsInstance>(this.Engine, value as ObjectInstance);
        }
      }
    }

    [JSProperty(Name = "dropLocation")]
    public string DropLocation
    {
      get
      {
        return m_dropLocation;
      }
      set
      {
        m_dropLocation = value;
      }
    }

    [JSFunction(Name = "cancel")]
    public void Cancel()
    {
      m_export.Cancel();
    }

    [JSFunction(Name = "cleanUpAutoGeneratedDataFiles")]
    public void CleanUpAutoGeneratedDataFiles()
    {
      m_export.CleanUpAutoGeneratedDataFiles();
    }

    [JSFunction(Name = "dispose")]
    public void Dispose()
    {
      m_export.Dispose();
    }

    [JSFunction(Name = "run")]
    public void Run()
    {
      m_export.Run();
      SPExportInstance.CopyFilesToDropLocation(m_export, m_dropLocation);
    }

    public static void CopyFilesToDropLocation(SPExport export, string dropLocation)
    {
      //If a drop location is specified, copy the files to the target location.
      if (dropLocation.IsNullOrWhiteSpace())
        return;

      var filesToCopy = export.Settings.DataFiles.OfType<string>()
        .Select(dataFile => new Tuple<string, string>(Path.Combine(export.Settings.FileLocation, dataFile), dataFile))
        .ToList();

      SPSite dropSite;
      SPWeb dropWeb;
      SPFolder dropFolder;

      if (!SPHelper.TryGetSPFolder(dropLocation, out dropSite, out dropWeb, out dropFolder))
        return;

      try
      {
        foreach (var fileToCopy in filesToCopy)
        {
          using (var fs = File.Open(fileToCopy.Item1, FileMode.Open, FileAccess.Read))
          {
            dropFolder.Files.Add(fileToCopy.Item2, fs, true, "", false);
          }
        }
      }
      finally
      {
        if (dropSite != null)
          dropSite.Dispose();

        if (dropWeb != null)
          dropWeb.Dispose();
      }
    }
  }
}
