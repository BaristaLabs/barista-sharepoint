namespace Barista.SharePoint.Migration.Library
{
  using System.Collections.Generic;
  using System.IO;
  using System.Linq;
  using Barista.Extensions;
  using Barista.Jurassic;
  using Barista.Jurassic.Library;
  using Barista.Library;
  using Barista.SharePoint.Library;
  using Microsoft.SharePoint;
  using Microsoft.SharePoint.Deployment;

  public class SPMigrationInstance : ObjectInstance
  {
    public SPMigrationInstance(ObjectInstance prototype)
      : base(prototype)
    {

      this.PopulateFields();
      this.PopulateFunctions();
    }

    [JSFunction(Name = "exportFile")]
    public ArrayInstance ExportFile(object file, object fileLocation, object baseFileName, object logFilePath)
    {
      SPFile spFile = null;

      if (file is SPFileInstance)
        spFile = (file as SPFileInstance).File;
      else if (file is GuidInstance)
      {
        var guid = (file as GuidInstance).Value;
        spFile = SPBaristaContext.Current.Web.GetFile(guid);
      }
      else if (file is UriInstance)
      {
        var uri = (file as UriInstance).Uri;
        spFile = SPBaristaContext.Current.Web.GetFile(uri.ToString());
      }

      if (spFile == null)
        throw new JavaScriptException(this.Engine, "Error", "Could not locate a file with the specified argument.");

      var exportObject = new SPExportObject
      {
        Id = spFile.UniqueId,
        Type = SPDeploymentObjectType.File,
        IncludeDescendants = SPIncludeDescendants.All
      };

      return ExportInternal(fileLocation, baseFileName, logFilePath, new List<SPExportObject> {exportObject});
    }

    [JSFunction(Name = "exportList")]
    public ArrayInstance ExportList(object list, object fileLocation, object baseFileName, object logFilePath)
    {
      SPList spList;

      if (list is SPListInstance)
        spList = (list as SPListInstance).List;
      else if (list is GuidInstance)
      {
        var guid = (list as GuidInstance).Value;
        spList = SPBaristaContext.Current.Web.Lists[guid];
      }
      else if (list is UriInstance)
      {
        var uri = (list as UriInstance).Uri;
        spList = SPBaristaContext.Current.Web.GetList(uri.ToString());
      }
      else
      {
        var listTitle = TypeConverter.ToString(list);
        spList = SPBaristaContext.Current.Web.Lists.TryGetList(listTitle);
      }

      if (spList == null)
        throw new JavaScriptException(this.Engine, "Error", "Could not locate a list with the specified argument.");

      var exportObject = new SPExportObject
      {
        Id = spList.ID,
        Type = SPDeploymentObjectType.List,
        IncludeDescendants = SPIncludeDescendants.All
      };

      return ExportInternal(fileLocation, baseFileName, logFilePath, new List<SPExportObject> { exportObject });
    }

    [JSFunction(Name = "export")]
    public ArrayInstance Export(object exportSettings)
    {
      var export = new SPExport();

      if (exportSettings is SPExportSettingsInstance)
        export.Settings = (exportSettings as SPExportSettingsInstance).SPExportSettings;
      else if (exportSettings is ObjectInstance)
      {
        var settings = JurassicHelper.Coerce<SPExportSettingsInstance>(this.Engine, exportSettings as ObjectInstance);
        export.Settings = settings.SPExportSettings;
      }
      else
      {
        throw new JavaScriptException(this.Engine, "Error", "Expected the first argument to be a export settings object.");
      }

      export.Run();

      var result = this.Engine.Array.Construct();
      foreach (var dataFile in export.Settings.DataFiles.OfType<string>())
      {
        ArrayInstance.Push(result, dataFile);
      }
      return result;
    }

    private ArrayInstance ExportInternal(object fileLocation, object baseFileName, object logFilePath, IEnumerable<SPExportObject> exportObjects)
    {
      var exportSettings = new SPExportSettings
      {
        AutoGenerateDataFileName = false,
        ExportMethod = Microsoft.SharePoint.Deployment.SPExportMethodType.ExportAll,
        SiteUrl = SPBaristaContext.Current.Site.Url,
        IncludeSecurity = Microsoft.SharePoint.Deployment.SPIncludeSecurity.All,
        IncludeVersions = Microsoft.SharePoint.Deployment.SPIncludeVersions.All,
        OverwriteExistingDataFile = true
      };

      if (fileLocation != Null.Value && fileLocation != Undefined.Value)
      {
        var strFileLocation = TypeConverter.ToString(fileLocation);
        if (strFileLocation.IsNullOrWhiteSpace() == false)
          exportSettings.FileLocation = strFileLocation;
      }

      if (baseFileName != Null.Value && baseFileName != Undefined.Value)
      {
        var strBaseFileName = TypeConverter.ToString(baseFileName);
        if (strBaseFileName.IsNullOrWhiteSpace() == false)
          exportSettings.BaseFileName = strBaseFileName;
      }

      if (logFilePath != Null.Value && logFilePath != Undefined.Value)
      {
        var strLogFilePath = TypeConverter.ToString(logFilePath);
        if (strLogFilePath.IsNullOrWhiteSpace() == false)
          exportSettings.LogFilePath = strLogFilePath;
      }

      foreach (var obj in exportObjects)
      {
        exportSettings.ExportObjects.Add(obj);
      }

      var export = new SPExport(exportSettings);
      export.Run();

      var result = this.Engine.Array.Construct();
      foreach (var dataFile in exportSettings.DataFiles.OfType<string>())
      {
        ArrayInstance.Push(result, Path.Combine(exportSettings.FileLocation, dataFile));
      }
      return result;
    }
  }
}
