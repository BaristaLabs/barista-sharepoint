<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>Barista Fiddle</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="">
    <meta name="author" content="">
    <meta http-equiv="X-UA-Compatible" content="IE=8" />
    <!-- Le styles -->
    <link rel="shortcut icon" href="favicon.ico" >
    <link href="../BaristaJS/Bootstrap-2.1.1/css/bootstrap.min.css" rel="stylesheet">
    <style type="text/css">
        html,
        body
        {
            height:100%;
            margin:0;
            padding:0;
        }
        html
        {
            overflow:hidden;
        }
        .container-fluid
        {
            padding-left: 0px;
            padding-right: 0px;
        }
        .navbar-fixed-top 
        {
            margin-bottom: 0px;
        }
        .CodeMirror 
        {
            border: 0px;
        }
        .CodeMirror-scroll
        {
            height: 100% 
        }
    </style>
    <link href="../BaristaJS/CodeMirror-2.34/lib/codemirror.css" rel="stylesheet" >
    <link href="../BaristaJS/CodeMirror-2.34/lib/util/simple-hint.css" rel="stylesheet">
    <link href="../BaristaJS/CodeMirror-2.34/theme/neat.css" rel="stylesheet">
    <link href="../BaristaJS/kendoui.web.2012.2.913/styles/kendo.common.min.css" rel="stylesheet" />
    <link href="../BaristaJS/kendoui.web.2012.2.913/styles/kendo.default.min.css" rel="stylesheet" />
    <!-- Le HTML5 shim, for IE6-8 support of HTML5 elements -->
    <!--[if lt IE 9]>
      <script src="../BaristaJS/html5.js"></script>
    <![endif]-->
</head>
<body>
    <div id="navbar" class="navbar navbar-inverse navbar-fixed-top">
        <div class="navbar-inner">
            <ul class="nav">
                <li>
                    <div>
                        <a id="btnRun" class="btn btn-primary" href="#"><i class="icon-play icon-white"></i> Run</a>
                    </div>
                </li>
                <li class="divider-vertical" />
                <li>
                    <div class="btn-group">
                        <a id="btnOpen" class="btn" href="#"><i class="icon-folder-open icon-black"></i> Open</a>
                        <a id="btnSave" class="btn" href="#"><i class="icon-edit icon-black"></i> Save</a>
                        <a class="btn dropdown-toggle" data-toggle="dropdown" href="#"><span class="caret"></span></a>
                        <ul class="dropdown-menu" style="margin-left: 85px">
                            <li><a id="btnSaveAs" href="#"><i class="icon-share"></i> Save As...</a></li>
                        </ul>
                    </div>
                </li>
                <li class="divider-vertical" />
                <li>
                    <div class="btn-group">
                        <a id="btnTidyUp" class="btn" href="#"><i class="icon-align-left icon-black"></i> TidyUp</a>
                        <a id="btnJSLint" class="btn" href="#"><i class="icon-check icon-black"></i> JSLint</a>
                        <a id="btnUnitTest" class="btn" href="#"><i class="icon-list-alt icon-black"></i> Create Unit Test</a>
                        <a class="btn dropdown-toggle" data-toggle="dropdown" href="#"><span class="caret"></span></a>
                        <ul class="dropdown-menu" style="margin-left: 175px">
                            <li><a id="btnGetEvalUrl" href="#"><i class="icon-share"></i> Get Eval Url...</a></li>
                        </ul>
                    </div>
                </li>
                <li class="divider-vertical" />
                <li class="pull-right">
                    <div class="btn-group">
                        <a id="btnSettings" class="btn" href="#"><i class="icon-wrench icon-black"></i> Settings</a>
                        <a id="btnHelp" class="btn" href="#"><i class="icon-question-sign icon-black"></i> Help</a>
                    </div>
                </li>
            </ul>
        </div>
    </div>
    <div id="mainContent" class="k-content container-fluid" style="height: 100%;">
        <div class="row-fluid" style="height: 100%">
            <div id="vertical">
                <div id="top-pane">
                    <div id="horizontal">
                        <div id="left-pane">
                            <div class="pane-content">
                                <!--<div id="editor"></div>-->
                                <textarea id="editor" name="editor"></textarea>
                            </div>
                        </div>
                        <div id="right-pane">
                            <div class="pane-content">
                                <div id="resultLoading" class="alert alert-info" style="display: none;">
                                   Retrieving Result...
                                </div>
                                <pre id="result"></pre>
                                <iframe id="htmlResult" style="display: none; width: 100%; height: 100%; border: none; background-color: White;"></iframe>
                            </div>
                        </div>
                    </div>
                </div>
                <div id="bottom-pane">
                    <div class="pane-content">
                        <div id="ulsLogLoading" class="alert alert-info" style="display: none;">
                           Retrieving Uls Log Result...
                        </div>
                        <div id="gridContainer" style="height: 100%; padding-bottom: 40px;">
                            <div id="ulsGrid""></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- /container -->

    <div class="modal" id="openDialog" tabindex="-1" role="dialog" aria-labelledby="openDialogLabel" aria-hidden="true" style="display: none">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
        <h3 id="openDialogLabel">Open</h3>
      </div>
      <div class="modal-body">
        <div id="openDialogRetrievingFolders" class="alert alert-info" style="display: none">
            Retrieving Files...
        </div>
        <div id="openDialogTreeView"></div>
      </div>
      <div class="modal-footer">
        <button class="btn" data-dismiss="modal" aria-hidden="true">Close</button>
        <button id="openDialogOpenButton" class="btn btn-primary disabled">Open</button>
      </div>
    </div>

    <div class="modal" id="saveAlertsDialog" tabindex="-1" role="dialog" aria-labelledby="saveAlertsDialogLabel" aria-hidden="true" style="display: none">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
        <h3 id="saveAlertsDialogLabel">Saving...</h3>
      </div>
      <div class="modal-body">
        <div id="saveAlertsDialogRetrievingFile" class="alert alert-info" style="display: none">
            Retrieving target file info...
        </div>
        <div id="saveAlertsDialogAlertArea">
            <div id="docLibDoesNotExistAlert" class="alert alert-error" style="display: none">
              <strong>Error!</strong> The specified Document Library does not exist.
                <p>
                    <a id="A1" class="btn disabled" href="#">Create the document library</a>
                </p>
            </div>
            <div id="requiresCheckoutNotCheckedOutAlert" class="alert alert-error" style="display: none">
              <strong>Error!</strong> Check out is required and the file is not checked out.
                <p>
                    <a id="btnSaveAlertsDialogCheckout" class="btn" href="#">Check out file</a>
                </p>
            </div>
            <div id="checkedOutToAnotherUserAlert" class="alert alert-error" style="display: none">
              <strong>Error!</strong> File is checked out to another user.
            </div>
            <div id="fileContentsHaveChangedAlert" class="alert" style="display: none">
              <strong>Warning!</strong> File contents have been changed since last load.
            </div>
            <div id="moderationNotEnabledAlert" class="alert" style="display: none">
              <strong>Warning!</strong> Moderation is not enabled on the target document library, your changes will take effect once the file has been checked in.
            </div>
            <div id="versioningNotEnabledAlert" class="alert" style="display: none">
              <strong>Warning!</strong> Versioning is not enabled on the target document library, file history will not be preserved.
            </div>
        </div>
      </div>
      <div class="modal-footer">
        <button class="btn" data-dismiss="modal" aria-hidden="true">Cancel</button>
        <button id="btnSaveAnyway" class="btn btn-primary disabled">Save Anyway</button>
      </div>
    </div>

    <div class="modal" id="saveAsDialog" tabindex="-1" role="dialog" aria-labelledby="saveAsDialogLabel" aria-hidden="true" style="display: none">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
        <h3 id="saveAsDialogLabel">Save As...</h3>
      </div>
      <div class="modal-body">
        <div id="saveAsDialogRetrievingFolders" class="alert alert-info">
            TODO: Implement a treeview that displays a drill-down of all Document Libraries/Folders/JS Files on the current web.
        </div>
        <div id="saveAsDialogTreeView"></div>
        <div>
            <input id="saveAsFileUrl" type="text" placeholder="Type the full path of the file to be saved..." style="width: 80%;" />
            <span class="help-block">Until the fancy tree view is implemented, type the full path of the file to be saved.</span>
            <span class="help-block">E.g.: http://ofsdev/Lists/Scripts/myScript.js</span>
        </div>
      </div>
      <div class="modal-footer">
        <button class="btn" data-dismiss="modal" aria-hidden="true">Close</button>
        <button id="btnSaveAsSave" class="btn btn-primary">Save</button>
      </div>
    </div>

    <div class="modal" id="jslintResultDialog" tabindex="-1" role="dialog" aria-labelledby="jsLintDialogLabel" aria-hidden="true" style="display: none">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
        <h3 id="jsLintDialogLabel">JsLint Result</h3>
      </div>
      <div class="modal-body">
        <div id="jslintResults"></div>
      </div>
      <div class="modal-footer">
        <button class="btn btn-primary" data-dismiss="modal">OK</button>
      </div>
    </div>

    
    <div class="modal" id="getEvalUrlDialog" tabindex="-1" role="dialog" aria-labelledby="getEvalUrlLabel" aria-hidden="true" style="display: none">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
        <h3 id="getEvalUrlLabel">Eval Url</h3>
      </div>
      <div class="modal-body">
        <pre id="evalUrl"></pre>
      </div>
      <div class="modal-footer">
        <button class="btn btn-primary" data-dismiss="modal">OK</button>
      </div>
    </div>

    <div class="modal" id="unitTestDialog" tabindex="-1" role="dialog" aria-labelledby="unitTestDialogLabel" aria-hidden="true" style="display: none">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
        <h3 id="unitTestDialogLabel">Unit Test</h3>
      </div>
      <div class="modal-body">
        <pre id="unitTestCode"></pre>
      </div>
      <div class="modal-footer">
        <button class="btn btn-primary" data-dismiss="modal">OK</button>
      </div>
    </div>

    <script id="jsLintResultTemplate" type="text/x-kendo-template">
        <ul>
            # for (var i = 0; i < data.errors.length; i++) { #
                # var jsResult = data.errors[i]; #
                <li>Error: <br/>
                Problem at line #= jsResult.line # character #= jsResult.character #: #= jsResult.reason #<br/>
                <div style="background-color: \#FFFADB;">#= jsResult.evidence #</div></li>
            # } #
        </ul>
    </script>

    <script id="unitTestTemplate" type="text/x-kendo-template">
asyncTest("[Your Unit Test Title]", function () {
    expect(1);

    var code = "#= data #";

    var request = jQuery.ajax({
        type: 'POST',
        contentType: "application/json; charset=utf-8",
        url: getDomain() + "/_vti_bin/Barista/v1/Barista.svc/eval",
        data: JSON.stringify({ code: code })
    });

    request.done(function (data, textStatus, jqXHR) {
        ok(1 == 0, "Define your test case(s) here.");
        start();
    });

    request.fail(function () {
        ok(1 == 0, "Call to service failed.");
        start();
    });
});
    </script>
    
    <!-- Le javascript
    ================================================== -->
    <!-- Placed at the end of the document so the pages load faster -->
    <script src="../BaristaJS/json2.js" type="text/javascript"
        charset="utf-8"></script>
        <script src="../BaristaJS/store.js" type="text/javascript"
        charset="utf-8"></script>
    <script src="../BaristaJS/jquery-1.8.2.min.js" type="text/javascript"
        charset="utf-8"></script>
    <script src="../BaristaJS/jquery.ba-resize.min.js" type="text/javascript"
        charset="utf-8"></script>
    <script src="../BaristaJS/jquery.hotkeys.js" type="text/javascript"
        charset="utf-8"></script>
    <script src="../BaristaJS/bootstrap-2.1.1/js/bootstrap.min.js" type="text/javascript"
        charset="utf-8"></script>
    <script src="../BaristaJS/kendoui.web.2012.2.913/js/kendo.web.min.js" type="text/javascript" charset="utf-8"></script>
    <script src="../BaristaJS/codemirror-2.34/lib/codemirror.js" type="text/javascript" charset="utf-8"></script>
    <script src="../BaristaJS/codemirror-2.34/lib/util/simple-hint.js" type="text/javascript" charset="utf-8"></script>
    <script src="../BaristaJS/codemirror-2.34/lib/util/javascript-hint.js" type="text/javascript" charset="utf-8"></script>
    <script src="../BaristaJS/codemirror-2.34/mode/javascript/javascript.js" type="text/javascript" charset="utf-8"></script>
    <script src="../BaristaJS/beautify.js" type="text/javascript"
        charset="utf-8"></script>
    <script src="../BaristaJS/jslint.js" type="text/javascript"
        charset="utf-8"></script>
    <script type="text/javascript">
        var editor = null;
        var currentUser = null;
        var currentWebUrl = null;
        var currentDocLibInfo = null;
        var currentFileInfo = null;
        var ulsData = {};

        var jsLintResultTemplate = kendo.template($("#jsLintResultTemplate").html());
        var unitTestTemplate = kendo.template($("#unitTestTemplate").html());

        function setupEditor() {

            CodeMirror.commands.run = function (cm) {
                executeCode();
            }

            CodeMirror.commands.autocomplete = function (cm) {
                CodeMirror.simpleHint(cm, CodeMirror.javascriptHint);
            }

            editor = CodeMirror.fromTextArea(document.getElementById("editor"), {
                lineNumbers: true,
                extraKeys: {
                    "Ctrl-Enter": "run",
                    "Ctrl-Space": "autocomplete"
                    },
                theme: "neat",
                indentUnit: 4,
            });

            editor.setSize($("#left-pane").width(), $("#left-pane").height());

            $("#left-pane").resize(function () {
                editor.setSize($("#left-pane").width(), $("#left-pane").height());
            });
        }

        function getScriptValue() {
            return editor.getValue();
        }

        function setScriptValue(script) {
            editor.setValue(script);
        }

        function renderUlsGrid() {
            if (ulsData === null || ulsData.length <= 0)
                return;

            $("#ulsGrid").kendoGrid({
                dataSource: {
                    data: ulsData,
                    schema: {
                        model: {
                            fields: {
                                Timestamp: {
                                    type: "date"
                                }
                            }
                        }
                    }
                },
                resizable: true,
                scrollable: false,
                columns: [
                                { field: "Timestamp", format: "{0:MM/dd hh:mm:ss.fff}", width: "75px" },
                                { field: "Area", title: "Area", width: "90px"},
                                { field: "Category", title: "Category", width: "140px" },
                                { field: "Level", title: "Level", width: "70px" },
                                { field: "Message", title: "Message", width: "100%" }
                            ]
            });
        }

        function onOpenDialogNodeSelected(treeView, selectedNode) {
            if (typeof(selectedNode) !== "undefined" && selectedNode != null) {

                if (selectedNode.type == "file") {
                    var docLibData = selectedNode.parentNode();
                    if (docLibData.type == "folder")
                        docLibData = selectedNode.parentNode().parentNode();

                    $("#openDialogOpenButton").data("selectedFile", selectedNode);
                    $("#openDialogOpenButton").data("selectedDocLib", docLibData);
                    $("#openDialogOpenButton").removeClass("disabled");
                }
            }
        }

        function openOpenDialog() {
            $("#openDialogRetrievingFolders").show();
            $("#openDialogTreeView").hide();
            $("#openDialogOpenButton").removeData("selectedDocLib");
            $("#openDialogOpenButton").removeData("selectedFile");
            $("#openDialogOpenButton").addClass("disabled");

            var request = jQuery.ajax({
                type: 'GET',
                contentType: "application/json; charset=utf-8",
                url: currentWebUrl + "/_vti_bin/Barista/v1/Barista.svc/eval?c=" + encodeURIComponent("/_layouts/BaristaFiddle/GetJSFilesInWeb.js"),
                cache: false
            });

            request.done(function (data) {
                var current = $("#openDialogTreeView").data("kendoTreeView");
                if (typeof(current) !== "undefined") {
                    current.destroy();
                    current = null;
                    $("#openDialogTreeView").removeData("kendoTreeView");
                }

                $("#openDialogTreeView").kendoTreeView({
                    dataSource: data,
                    select: function(e) {
                        var nodeData = this.dataItem(e.node);
                        onOpenDialogNodeSelected(this, nodeData);
                    }
                });

                current = $("#openDialogTreeView").data("kendoTreeView");
                var selectedNode = current.select();
                onOpenDialogNodeSelected(current, selectedNode[0]);

                $("#openDialogRetrievingFolders").hide();
                $("#openDialogTreeView").show();
            });

            request.fail(function (data) {
                //Do something..
            });

            $("#openDialog").modal("show");
        }

        function openSaveAsDialog() {
            if (currentFileInfo == null)
                $("#saveAsFileUrl").val("");
            else
                $("#saveAsFileUrl").val(currentFileInfo.fileUrl);

            $("#saveAsDialog").modal("show");
        }

        function validateSaveFile(fileUrl) {
            if (fileUrl == null) {
                //Pop the save as dialog...
                openSaveAsDialog();
                return;
            }

            $("#saveAlertsDialogRetrievingFile").show();
            $("#saveAlertsDialogAlertArea .alert").hide();
            $("#saveAlertsDialog").modal("show");

            var request = jQuery.ajax({
                type: 'GET',
                contentType: "application/json; charset=utf-8",
                url: currentWebUrl + "/_vti_bin/Barista/v1/Barista.svc/eval?c=" + encodeURIComponent("/_layouts/BaristaFiddle/GetFileInfo.js"),
                cache: false,
                data: { f: fileUrl },
                success: function (data) {
                    $("#saveAlertsDialogRetrievingFile").hide();

                    $("#btnSaveAnyway").addClass("disabled");

                    var warningCount = 0;
                    var errorCount = 0;

                    if (typeof (data) === "undefined" || JSON.stringify(data) == "{}" || typeof (data.docLibInfo) == "undefined") {
                        $("#docLibDoesNotExistAlert").show();
                        errorCount++;
                    }

                    if (typeof (data.fileInfo) !== "undefined") {
                        if (data.docLibInfo.enableModeration == false) {
                            $("#moderationNotEnabledAlert").show();
                            warningCount++;
                        }

                        if (data.docLibInfo.enableVersioning == false) {
                            $("#versioningNotEnabledAlert").show();
                            warningCount++;
                        }

                        if (currentFileInfo != null && data.fileInfo.eTag != currentFileInfo.eTag) {
                            $("#fileContentsHaveChangedAlert").show();
                            warningCount++;
                        }

                        if (data.docLibInfo.requireCheckout == true && data.fileInfo.checkOutLevel != "Checkout" && (data.fileInfo.checkedOutByUser == null || currentUser.loginName != data.fileInfo.checkedOutByUser.loginName)) {
                            $("#requiresCheckoutNotCheckedOutAlert").show();
                            errorCount++;
                        }

                        if (data.fileInfo.checkOutLevel == "Checkout" && data.fileInfo.checkedOutByUser != null && currentUser.loginName != data.fileInfo.checkedOutByUser.loginName) {
                            $("#checkedOutToAnotherUserAlert").show();
                            errorCount++;
                        }
                    }

                    if (errorCount <= 0) {
                        $("#btnSaveAnyway").removeClass("disabled");
                    }

                    //If no warnings/errors, close the dlg.
                    if (errorCount <= 0 && warningCount <= 0) {
                        $("#saveAlertsDialog").modal("hide");
                        actualSaveFile(fileUrl);
                    }
                }
            });
        }

        function actualSaveFile(fileUrl) {
            var code = getScriptValue();
            store.set("BaristaCode", code);

            var request = jQuery.ajax({
                type: 'POST',
                contentType: "application/x-www-form-jsonencoded",
                url: currentWebUrl + "/_vti_bin/Barista/v1/Barista.svc/eval?c=" + encodeURIComponent("/_layouts/BaristaFiddle/SaveFile.js") + "&f=" + encodeURIComponent(fileUrl),
                data: JSON.stringify({ contents: code }),
                success: function (data) {
                    currentDocLibInfo = data.docLibInfo;
                    currentFileInfo = data.fileInfo;
                    $('#btnSave').tooltip('destroy')
                    $('#btnSave').tooltip({
                        title: currentFileInfo.fileUrl,
                        placement: "bottom"
                    });
                    $("#saveAlertsDialog").modal("hide");
                },
                error: function (data) {
                    alert("An error occurred during save.");
                    $("#saveAlertsDialog").modal("hide");
                }
            });
        }

        function getCurrentUser() {
            var request = jQuery.ajax({
                type: 'GET',
                contentType: "application/json; charset=utf-8",
                url: "_vti_bin/Barista/v1/Barista.svc/eval?c=" + encodeURIComponent("var sp=require(\"SharePoint\"); sp.getCurrentUser()"),
                cache: false,
                success: function(data) {
                    currentUser = data;
                }
            });
        }

        function getCurrentWebUrl() {
            var request = jQuery.ajax({
                type: 'GET',
                contentType: "application/json; charset=utf-8",
                url: "_vti_bin/Barista/v1/Barista.svc/eval?c=" + encodeURIComponent("var sp=require(\"SharePoint\"); sp.currentContext.web.url"),
                cache: false,
                success: function (data) {
                    currentWebUrl = data;
                }
            });
        }

        function executeCode() {
            var code = getScriptValue();
            store.set("BaristaCode", code);
            $("#result").hide();
            $("#htmlResult").hide();
            $("#ulsGrid").hide();
            $("#resultLoading").show();

            var request = jQuery.ajax({
                type: 'POST',
                contentType: "application/json; charset=utf-8",
                url: currentWebUrl + "/_vti_bin/Barista/v1/Barista.svc/eval",
                data: JSON.stringify({ code: code }),
                success: function (data, textStatus, jqXHR) {
                    var contentType = jqXHR.getResponseHeader('Content-Type');
                    if (contentType != null && contentType.indexOf("text/html") == 0) {

                        //var head = $(data).children('head');
                        //var body = $(data).children('body');

                        $("#htmlResult").contents().find('html').html(data);
                        //$("#htmlResult").contents().find('html')[0].replaceChild(head[0], $(this).contents().find('head')[0]);
                        //$("#htmlResult").contents().find('html')[0].replaceChild(body[0], $(this).contents().find('body')[0]);
                    }
                    else {
                        var dataText = JSON.stringify(data, null, 4);
                        $("#result").text(dataText);
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    var contentType = jqXHR.getResponseHeader('Content-Type');
                    if (contentType.indexOf("text/html") == 0) {
                        $("#htmlResult").contents().find('html').html(jqXHR.responseText);
                    }
                    else {
                        $("#result").text($(jqXHR.responseText).children(".intro").text());
                    }
                },
                complete: function (jqXHR, textStatus) {

                    $("#ulsGrid").hide();
                    $("#resultLoading").hide();

                    //If 200 was not returned, display the error.
                    if (typeof (jqXHR) == "undefined" || jqXHR.statusText == "Bad Request" || textStatus == "Bad Request" || jqXHR.status != 200) {

                        if (typeof (jqXHR) == "undefined")
                            $("#result").show();

                        var contentType = jqXHR.getResponseHeader('Content-Type');
                        if (contentType != null && contentType.indexOf("text/html") == 0)
                            $("#htmlResult").show();
                        else
                            $("#result").show();
                    }
                    else {
                        //Show the result.
                        var contentType = jqXHR.getResponseHeader('Content-Type');
                        if (contentType != null && contentType.indexOf("text/html") == 0)
                            $("#htmlResult").show();
                        else
                            $("#result").show();
                    }

                    //Retrieve the log.
                    var bottomPaneHeight = $("#bottom-pane").css("height");
                    if (bottomPaneHeight != "0" && bottomPaneHeight != "0px") {
                        $("#ulsLogLoading").show();
                        var spRequestGuid = jqXHR.getResponseHeader("SPRequestGuid");
                        var items = spRequestGuid.split(",");


                        setTimeout(function () {
                            var logRequest = jQuery.ajax({
                                type: 'GET',
                                contentType: "application/json; charset=utf-8",
                                url: currentWebUrl + "/_vti_bin/Barista/v1/Barista.svc/eval?c=" + encodeURIComponent("/_layouts/BaristaFiddle/GetUlsLogEntries.js") + "&cid=" + encodeURIComponent(items[0]),
                                cache: false,
                                success: function (data) {
                                    $("#ulsLogLoading").hide();

                                    ulsData = data;
                                    renderUlsGrid();
                                    $("#ulsGrid").show();
                                }
                            });
                        }, 2400);
                    }
                }
            });
        }

        function updateStoredSettings() {
            var paneSizes = {
                leftPaneSize: $("#left-pane").width(),
                bottomPaneSize: $("#bottom-pane").height()
            };

            store.set("Barista-Settings-PaneSizes", JSON.stringify(paneSizes));
        }

        $(document).ready(function () {
            var code = store.get("BaristaCode");
            var paneSizeSettings = store.get("Barista-Settings-PaneSizes");

            var bottomPaneSize = "240px";
            var leftPaneSize = "50%";
            if (typeof (paneSizeSettings) != "undefined" && paneSizeSettings.length > 0) {
                var paneSizes = JSON.parse(paneSizeSettings);
                leftPaneSize = paneSizes.leftPaneSize + "px";
                bottomPaneSize = paneSizes.bottomPaneSize + "px";
            }

            setupEditor();

            if (code != null && code.length > 0) {
                setScriptValue(code);
            }

            $("#vertical").kendoSplitter({
                orientation: "vertical",
                panes: [
                            { collapsible: false },
                            { collapsible: true, size: bottomPaneSize }
                        ]
            });

            $("#horizontal").kendoSplitter({
                panes: [
                            { collapsible: true, size: leftPaneSize },
                            { collapsible: true }
                        ]
            });



            getCurrentUser();
            getCurrentWebUrl();
        });

        //Have the splitter respond to window resize events.
        $(window).resize(function () {
            if ($("#navbar").css("position") == "static") {
                $("#mainContent").css("margin-top", "0px");
            }
            else {
                $("#mainContent").css("margin-top", $("#navbar").height());
            }
            $('#vertical').height($('.row-fluid').height() - 40);
            $("#vertical").data("kendoSplitter").trigger("resize");
        });

        $("#vertical").resize(function () {
            $("#result").css("height", ($("#top-pane").height() - 31) + "px");
            $("#htmlResult").css("height", ($("#top-pane").height() - 4) + "px");
            updateStoredSettings();
        });

        $("#horizontal").resize(function () {
            $("#result").css("width", ($("#right-pane").width() - 21) + "px");
            $("#htmlResult").css("width", $("#right-pane").width() + "px");
            updateStoredSettings();
        });

        $("#btnRun").click(function () {
            executeCode();
        });

        $("#btnOpen").click(function () {
            openOpenDialog();
        });

        $("#openDialogOpenButton").click(function() {
            var selectedFile = $("#openDialogOpenButton").data("selectedFile");
            var selectedDocLib = $("#openDialogOpenButton").data("selectedDocLib");

            if (selectedFile != null) {
                var codeFileRequest = jQuery.ajax({
                        type: 'GET',
                        contentType: "application/json; charset=utf-8",
                        url: selectedFile.fileUrl,
                        cache: false,
                        complete: function(data) {
                            setScriptValue(data.responseText);
                            $('#openDialog').modal('hide');
                            currentFileInfo = selectedFile;
                            currentDocLibInfo = selectedDocLib;
                            $('#btnSave').tooltip('destroy')
                            $('#btnSave').tooltip({
                                title: selectedFile.fileUrl,
                                placement: "bottom"
                            });
                        },
                        error: function(data) {
                            //do something...
                        }
                    });
            }
        });

        $("#btnSave").click(function () {
            var fileUrl = null;
            if (currentFileInfo !== null)
                fileUrl = currentFileInfo.fileUrl;

            validateSaveFile(fileUrl);
        });

        $('#btnSave').tooltip({
            title: "A target file has not been set...",
            placement: "bottom"
        });

        $("#btnSaveAlertsDialogCheckout").click(function () {
            $("#saveAlertsDialog").modal("hide");
            var request = jQuery.ajax({
                type: 'GET',
                contentType: "application/json; charset=utf-8",
                url: currentWebUrl + "/_vti_bin/Barista/v1/Barista.svc/eval?c=" + encodeURIComponent("/_layouts/BaristaFiddle/CheckOutFile.js"),
                cache: false,
                data: { f: currentFileInfo.fileUrl },
                success: function(data) {
                    validateSaveFile(currentFileInfo.fileUrl);
                    }
                });
        });

        $('#btnSaveAnyway').tooltip({
            title: "Here, there be dragons...",
            placement: "bottom"
        });

        $("#btnSaveAnyway").click(function () {
            actualSaveFile(currentFileInfo.fileUrl);
        });

        $("#btnSaveAs").click(function () {
            openSaveAsDialog();
        });

        $("#btnSaveAsSave").click(function () {
            $("#saveAsDialog").modal("hide");
            validateSaveFile($("#saveAsFileUrl").val());
        });

        $("#btnTidyUp").click(function () {
            var code = getScriptValue();
            var sobeautiful = js_beautify(code);
            setScriptValue(sobeautiful);
        });

        $("#btnJSLint").click(function () {
            var code = getScriptValue();
            var myResult = JSLINT(code, {
                sloppy: true
            });

            var jslintResults = JSLINT.data();

            if (typeof (jslintResults.errors) == "undefined") {
                $("#jslintResults").html("Your JS code is valid.");
            }
            else {
                $("#jslintResults").html(jsLintResultTemplate(jslintResults));
            }

            $("#jslintResultDialog").modal("show");
        });

        $("#btnUnitTest").click(function () {
            var code = getScriptValue();
            var escaped = code.replace(/\r\n\r\n/g, "\r\n").replace(/\n\n/g, "\n");
            escaped = escaped.replace(/\"/g, "\\\"").replace(/\r\n/g, "\\\r\n").replace(/\n/g, "\\\n");

            $("#unitTestCode").text(unitTestTemplate(escaped));
            $("#unitTestDialog").modal("show");
        });

        $("#btnGetEvalUrl").click(function () {

            if (currentFileInfo !== null) {
                $("#evalUrl").text(currentWebUrl + "/_vti_bin/Barista/v1/Barista.svc/eval?c=" + encodeURIComponent(currentfileinfo.fileUrl));
            }
            else {
                $("#evalUrl").text(currentWebUrl + "/_vti_bin/Barista/v1/Barista.svc/eval?c=" + encodeURIComponent(getScriptValue()));
            }
            $("#getEvalUrlDialog").modal("show");
        });

        $(document).bind('keydown', 'ctrl+return', function() {
            executeCode();
        });

    </script>
    <style scoped>
        #vertical
        {
            height: 100%;
            border: 0;
            width: 100%;
        }
        #horizontal
        {
            height: 100%;
            border: 0;
            width: 100%;
        }
        #bottom-pane
        {
            background-color: rgba(60, 70, 80, 0.15);
        }
        #left-pane
        {
            background-color: rgba(60, 70, 80, 0.05);
        }
        #center-pane
        {
            background-color: rgba(60, 70, 80, 0.05);
        }
        #right-pane
        {
            background-color: rgba(60, 70, 80, 0.05);
        }
        .pane-content
        {
            padding: 0 0px;
        }
        
        #openDialogTreeView .k-sprite {
            background-image: url("../BaristaJS/bootstrap-2.1.1/img/glyphicons-halflings.png");
        }
    </style>
</body>
</html>
